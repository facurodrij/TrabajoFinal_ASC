# Generated by Django 4.1.3 on 2023-10-24 19:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import eventos.models
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre')),
                ('descripcion', models.TextField(verbose_name='Descripción')),
                ('fecha_inicio', models.DateField(verbose_name='Fecha de inicio')),
                ('hora_inicio', models.TimeField(verbose_name='Hora de inicio')),
                ('fecha_fin', models.DateField(verbose_name='Fecha de finalización')),
                ('hora_fin', models.TimeField(verbose_name='Hora de finalización')),
                ('registro_deadline', models.DateField(blank=True, help_text='Fecha límite para registrarse al evento. Si no se especifica, no hay límite.', null=True, verbose_name='Fecha límite de registro')),
                ('mayor_edad', models.BooleanField(default=False, help_text='Indica si el evento es para mayores de edad.', verbose_name='Mayor de edad')),
                ('descuento_socio', models.DecimalField(decimal_places=2, default=0, help_text='Porcentaje de descuento para socios.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Descuento para socios')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('imagen', models.ImageField(upload_to=eventos.models.Evento.image_directory_path, verbose_name='Imagen')),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
            },
        ),
        migrations.CreateModel(
            name='VentaTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, verbose_name='Correo electrónico')),
                ('porcentaje_descuento', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Porcentaje de descuento')),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Subtotal')),
                ('pagado', models.BooleanField(default=False, help_text='Marcar si el cliente ya pagó', verbose_name='Pagado')),
                ('preference_id', models.CharField(blank=True, help_text='ID de la preferencia de pago de Mercado Pago', max_length=255, null=True, verbose_name='Preference ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='eventos.evento', verbose_name='Evento')),
            ],
            options={
                'verbose_name': 'Venta de ticket',
                'verbose_name_plural': 'Ventas de tickets',
            },
        ),
        migrations.CreateModel(
            name='TicketVariante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre')),
                ('precio', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Precio')),
                ('total_tickets', models.PositiveIntegerField(verbose_name='Total de tickets')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='eventos.evento', verbose_name='Evento')),
            ],
            options={
                'verbose_name': 'Variante de ticket',
                'verbose_name_plural': 'Variantes de tickets',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('dni', models.CharField(max_length=9, verbose_name='DNI')),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre del cliente')),
                ('is_used', models.BooleanField(default=False, verbose_name='Usado')),
                ('check_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de check-in')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('check_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Escaneado por')),
                ('ticket_variante', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='eventos.ticketvariante', verbose_name='Variante de ticket')),
                ('venta_ticket', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='eventos.ventaticket', verbose_name='Venta')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
            },
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutos_expiracion_venta', models.PositiveSmallIntegerField(default=5, help_text='La venta de tickets debe ser pagada dentro de esta cantidad de minutos, de lo contrario se cancelará.', verbose_name='Minutos de expiración por falta de pago')),
                ('max_tickets_por_venta', models.PositiveSmallIntegerField(default=10, help_text='Máximo cantidad de tickets que se pueden comprar en una sola venta.', verbose_name='Máximo de tickets por venta')),
                ('club', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='evento_parameters', to='core.club', verbose_name='Club')),
            ],
            options={
                'verbose_name': 'Parámetro de evento',
                'verbose_name_plural': 'Parámetros de eventos',
            },
        ),
        migrations.CreateModel(
            name='PagoVentaTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=255, unique=True, verbose_name='Payment ID')),
                ('status', models.CharField(max_length=50, verbose_name='Estado')),
                ('status_detail', models.CharField(max_length=255, verbose_name='Detalle del estado')),
                ('transaction_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto de la transacción')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('date_approved', models.DateTimeField(verbose_name='Fecha de aprobación')),
                ('venta_ticket', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='eventos.ventaticket', verbose_name='Venta de ticket')),
            ],
            options={
                'verbose_name': 'Pago de venta de ticket',
                'verbose_name_plural': 'Pagos de ventas de tickets',
            },
        ),
        migrations.CreateModel(
            name='ItemVentaTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(verbose_name='Cantidad')),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Subtotal')),
                ('ticket_variante', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='eventos.ticketvariante', verbose_name='Variantes de ticket')),
                ('venta_ticket', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='eventos.ventaticket', verbose_name='Venta')),
            ],
            options={
                'verbose_name': 'Item de venta de ticket',
                'verbose_name_plural': 'Items de ventas de tickets',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVentaTicket',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, verbose_name='Correo electrónico')),
                ('porcentaje_descuento', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Porcentaje de descuento')),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Subtotal')),
                ('pagado', models.BooleanField(default=False, help_text='Marcar si el cliente ya pagó', verbose_name='Pagado')),
                ('preference_id', models.CharField(blank=True, help_text='ID de la preferencia de pago de Mercado Pago', max_length=255, null=True, verbose_name='Preference ID')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de actualización')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('evento', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='eventos.evento', verbose_name='Evento')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Venta de ticket',
                'verbose_name_plural': 'historical Ventas de tickets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTicketVariante',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre')),
                ('precio', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Precio')),
                ('total_tickets', models.PositiveIntegerField(verbose_name='Total de tickets')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de actualización')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('evento', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='eventos.evento', verbose_name='Evento')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Variante de ticket',
                'verbose_name_plural': 'historical Variantes de tickets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTicket',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('dni', models.CharField(max_length=9, verbose_name='DNI')),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre del cliente')),
                ('is_used', models.BooleanField(default=False, verbose_name='Usado')),
                ('check_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de check-in')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de actualización')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('check_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Escaneado por')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('ticket_variante', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='eventos.ticketvariante', verbose_name='Variante de ticket')),
                ('venta_ticket', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='eventos.ventaticket', verbose_name='Venta')),
            ],
            options={
                'verbose_name': 'historical Ticket',
                'verbose_name_plural': 'historical Tickets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalParameters',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('minutos_expiracion_venta', models.PositiveSmallIntegerField(default=5, help_text='La venta de tickets debe ser pagada dentro de esta cantidad de minutos, de lo contrario se cancelará.', verbose_name='Minutos de expiración por falta de pago')),
                ('max_tickets_por_venta', models.PositiveSmallIntegerField(default=10, help_text='Máximo cantidad de tickets que se pueden comprar en una sola venta.', verbose_name='Máximo de tickets por venta')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('club', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.club', verbose_name='Club')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Parámetro de evento',
                'verbose_name_plural': 'historical Parámetros de eventos',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPagoVentaTicket',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('payment_id', models.CharField(db_index=True, max_length=255, verbose_name='Payment ID')),
                ('status', models.CharField(max_length=50, verbose_name='Estado')),
                ('status_detail', models.CharField(max_length=255, verbose_name='Detalle del estado')),
                ('transaction_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto de la transacción')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de actualización')),
                ('date_approved', models.DateTimeField(verbose_name='Fecha de aprobación')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('venta_ticket', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='eventos.ventaticket', verbose_name='Venta de ticket')),
            ],
            options={
                'verbose_name': 'historical Pago de venta de ticket',
                'verbose_name_plural': 'historical Pagos de ventas de tickets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalItemVentaTicket',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(verbose_name='Cantidad')),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Subtotal')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('ticket_variante', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='eventos.ticketvariante', verbose_name='Variantes de ticket')),
                ('venta_ticket', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='eventos.ventaticket', verbose_name='Venta')),
            ],
            options={
                'verbose_name': 'historical Item de venta de ticket',
                'verbose_name_plural': 'historical Items de ventas de tickets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEvento',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre')),
                ('descripcion', models.TextField(verbose_name='Descripción')),
                ('fecha_inicio', models.DateField(verbose_name='Fecha de inicio')),
                ('hora_inicio', models.TimeField(verbose_name='Hora de inicio')),
                ('fecha_fin', models.DateField(verbose_name='Fecha de finalización')),
                ('hora_fin', models.TimeField(verbose_name='Hora de finalización')),
                ('registro_deadline', models.DateField(blank=True, help_text='Fecha límite para registrarse al evento. Si no se especifica, no hay límite.', null=True, verbose_name='Fecha límite de registro')),
                ('mayor_edad', models.BooleanField(default=False, help_text='Indica si el evento es para mayores de edad.', verbose_name='Mayor de edad')),
                ('descuento_socio', models.DecimalField(decimal_places=2, default=0, help_text='Porcentaje de descuento para socios.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Descuento para socios')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de actualización')),
                ('imagen', models.TextField(max_length=100, verbose_name='Imagen')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Evento',
                'verbose_name_plural': 'historical Eventos',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddConstraint(
            model_name='evento',
            constraint=models.CheckConstraint(check=models.Q(('fecha_inicio__lte', models.F('fecha_fin'))), name='fecha_inicio_menor_fecha_fin', violation_error_message='La fecha de inicio debe ser menor o igual a la fecha de finalización.'),
        ),
        migrations.AddConstraint(
            model_name='evento',
            constraint=models.CheckConstraint(check=models.Q(('registro_deadline__lte', models.F('fecha_inicio'))), name='registro_deadline_menor_fecha_inicio', violation_error_message='La fecha límite de registro debe ser menor o igual a la fecha de inicio.'),
        ),
        migrations.AddConstraint(
            model_name='ticket',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('is_used', True), _negated=True), ('check_date__isnull', False), _connector='OR'), name='ticket_check_date_not_null_if_is_used_is_true', violation_error_message='El campo "Fecha de check-in" no puede ser nulo si el ticket está usado.'),
        ),
        migrations.AddConstraint(
            model_name='ticket',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('is_used', True), _negated=True), ('check_by__isnull', False), _connector='OR'), name='ticket_check_by_not_null_if_is_used_is_true', violation_error_message='El campo "Escaneado por" no puede ser nulo si el ticket está usado.'),
        ),
    ]
