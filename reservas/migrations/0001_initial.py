# Generated by Django 4.1.3 on 2023-10-24 19:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import reservas.models
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cancha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('cantidad_jugadores', models.PositiveSmallIntegerField(blank=True, default=5, help_text='Cantidad de jugadores por equipo', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Cantidad de jugadores')),
                ('precio', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Precio por hora')),
                ('precio_luz', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Precio por hora con luz')),
                ('imagen', models.ImageField(blank=True, null=True, upload_to=reservas.models.Cancha.imagen_directory_path, verbose_name='Imagen')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.club')),
            ],
            options={
                'verbose_name': 'Cancha',
                'verbose_name_plural': 'Canchas',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Deporte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
            ],
            options={
                'verbose_name': 'Deporte',
                'verbose_name_plural': 'Deportes',
            },
        ),
        migrations.CreateModel(
            name='Superficie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
            ],
            options={
                'verbose_name': 'Superficie',
                'verbose_name_plural': 'Superficies',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=50, verbose_name='Nombre (cliente)')),
                ('email', models.EmailField(max_length=254, verbose_name='Email (cliente)')),
                ('fecha', models.DateField(verbose_name='Fecha')),
                ('hora', models.TimeField(verbose_name='Hora')),
                ('nota', models.TextField(blank=True, null=True, verbose_name='Nota')),
                ('precio', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Precio')),
                ('con_luz', models.BooleanField(default=False, help_text='Marcar si la reserva es con luz', verbose_name='Con luz')),
                ('expira', models.BooleanField(default=True, help_text='Marcar si expira por falta de pago', verbose_name='Expira (falta de pago)')),
                ('forma_pago', models.PositiveSmallIntegerField(choices=[(1, 'Presencial'), (2, 'Online')], default=1, verbose_name='Forma de pago')),
                ('pagado', models.BooleanField(default=False, help_text='Marcar si el cliente ya pagó', verbose_name='Pagado')),
                ('preference_id', models.CharField(blank=True, help_text='ID de la preferencia de pago de Mercado Pago', max_length=255, null=True, verbose_name='Preference ID')),
                ('asistencia', models.BooleanField(default=False, help_text='Asistencia del cliente', verbose_name='Asistencia')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('cancha', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reservas.cancha')),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
            },
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('horas_anticipacion', models.PositiveSmallIntegerField(default=2, help_text='La fecha de inicio de la reserva debe ser al menos esta cantidad de horas mayor a la fecha actual.', verbose_name='Horas de anticipación')),
                ('minutos_expiracion_reserva', models.PositiveSmallIntegerField(default=5, help_text='La reserva debe ser pagada dentro de esta cantidad de minutos, de lo contrario se cancelará.', verbose_name='Minutos de expiración por falta de pago')),
                ('max_reservas_user', models.PositiveSmallIntegerField(default=2, help_text='La cantidad máxima de reservas activas que puede tener un usuario.', verbose_name='Máximo de reservas pendientes por usuario')),
                ('avisar_cancha_libre', models.BooleanField(default=True, help_text='Enviar avisos a los usuarios sobre la cancha que queda libre, cuando una reserva que está a pocas horas de comenzar se cancela.', verbose_name='Avisar cancha libre')),
                ('horas_avisar_cancha_libre', models.PositiveSmallIntegerField(default=5, help_text='Si una reserva se cancela y le quedan menos horas que esta cantidad para comenzar, se enviará un aviso a los usuarios.', verbose_name='Horas para avisar cancha libre')),
                ('finalizar_al_comenzar', models.BooleanField(default=True, help_text='Finalizar la reserva al comenzar, de lo contrario finalizará al terminar.', verbose_name='Finalizar al comenzar')),
                ('club', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reserva_parameters', to='core.club', verbose_name='Club')),
            ],
            options={
                'verbose_name': 'Parámetro de reserva',
                'verbose_name_plural': 'Parámetros de reservas',
            },
        ),
        migrations.CreateModel(
            name='PagoReserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=255, verbose_name='ID de pago')),
                ('status', models.CharField(max_length=50, verbose_name='Estado')),
                ('status_detail', models.CharField(max_length=255, verbose_name='Detalle del estado')),
                ('transaction_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto de la transacción')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('date_approved', models.DateTimeField(verbose_name='Fecha de aprobación')),
                ('reserva', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='reservas.reserva', verbose_name='Reserva')),
            ],
            options={
                'verbose_name': 'Pago de reserva',
                'verbose_name_plural': 'Pagos de reservas',
            },
        ),
        migrations.CreateModel(
            name='HoraLaboral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hora', models.TimeField(verbose_name='Hora')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.club')),
            ],
            options={
                'verbose_name': 'Hora laboral',
                'verbose_name_plural': 'Horas laborales',
                'ordering': ['hora'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalReserva',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('nombre', models.CharField(max_length=50, verbose_name='Nombre (cliente)')),
                ('email', models.EmailField(max_length=254, verbose_name='Email (cliente)')),
                ('fecha', models.DateField(verbose_name='Fecha')),
                ('hora', models.TimeField(verbose_name='Hora')),
                ('nota', models.TextField(blank=True, null=True, verbose_name='Nota')),
                ('precio', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Precio')),
                ('con_luz', models.BooleanField(default=False, help_text='Marcar si la reserva es con luz', verbose_name='Con luz')),
                ('expira', models.BooleanField(default=True, help_text='Marcar si expira por falta de pago', verbose_name='Expira (falta de pago)')),
                ('forma_pago', models.PositiveSmallIntegerField(choices=[(1, 'Presencial'), (2, 'Online')], default=1, verbose_name='Forma de pago')),
                ('pagado', models.BooleanField(default=False, help_text='Marcar si el cliente ya pagó', verbose_name='Pagado')),
                ('preference_id', models.CharField(blank=True, help_text='ID de la preferencia de pago de Mercado Pago', max_length=255, null=True, verbose_name='Preference ID')),
                ('asistencia', models.BooleanField(default=False, help_text='Asistencia del cliente', verbose_name='Asistencia')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de actualización')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('cancha', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reservas.cancha')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Reserva',
                'verbose_name_plural': 'historical Reservas',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalParameters',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('horas_anticipacion', models.PositiveSmallIntegerField(default=2, help_text='La fecha de inicio de la reserva debe ser al menos esta cantidad de horas mayor a la fecha actual.', verbose_name='Horas de anticipación')),
                ('minutos_expiracion_reserva', models.PositiveSmallIntegerField(default=5, help_text='La reserva debe ser pagada dentro de esta cantidad de minutos, de lo contrario se cancelará.', verbose_name='Minutos de expiración por falta de pago')),
                ('max_reservas_user', models.PositiveSmallIntegerField(default=2, help_text='La cantidad máxima de reservas activas que puede tener un usuario.', verbose_name='Máximo de reservas pendientes por usuario')),
                ('avisar_cancha_libre', models.BooleanField(default=True, help_text='Enviar avisos a los usuarios sobre la cancha que queda libre, cuando una reserva que está a pocas horas de comenzar se cancela.', verbose_name='Avisar cancha libre')),
                ('horas_avisar_cancha_libre', models.PositiveSmallIntegerField(default=5, help_text='Si una reserva se cancela y le quedan menos horas que esta cantidad para comenzar, se enviará un aviso a los usuarios.', verbose_name='Horas para avisar cancha libre')),
                ('finalizar_al_comenzar', models.BooleanField(default=True, help_text='Finalizar la reserva al comenzar, de lo contrario finalizará al terminar.', verbose_name='Finalizar al comenzar')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('club', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.club', verbose_name='Club')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Parámetro de reserva',
                'verbose_name_plural': 'historical Parámetros de reservas',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPagoReserva',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=255, verbose_name='ID de pago')),
                ('status', models.CharField(max_length=50, verbose_name='Estado')),
                ('status_detail', models.CharField(max_length=255, verbose_name='Detalle del estado')),
                ('transaction_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto de la transacción')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de creación')),
                ('date_updated', models.DateTimeField(blank=True, editable=False, verbose_name='Fecha de actualización')),
                ('date_approved', models.DateTimeField(verbose_name='Fecha de aprobación')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reserva', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reservas.reserva', verbose_name='Reserva')),
            ],
            options={
                'verbose_name': 'historical Pago de reserva',
                'verbose_name_plural': 'historical Pagos de reservas',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCancha',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('cantidad_jugadores', models.PositiveSmallIntegerField(blank=True, default=5, help_text='Cantidad de jugadores por equipo', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Cantidad de jugadores')),
                ('precio', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Precio por hora')),
                ('precio_luz', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Precio por hora con luz')),
                ('imagen', models.TextField(blank=True, max_length=100, null=True, verbose_name='Imagen')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('club', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.club')),
                ('deporte', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reservas.deporte')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('superficie', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reservas.superficie')),
            ],
            options={
                'verbose_name': 'historical Cancha',
                'verbose_name_plural': 'historical Canchas',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='CanchaHoraLaboral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('con_luz', models.BooleanField(default=False, verbose_name='Con luz')),
                ('cancha', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reservas.cancha')),
                ('hora_laboral', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reservas.horalaboral')),
            ],
            options={
                'verbose_name': 'Horario de cancha',
                'verbose_name_plural': 'Horarios de canchas',
            },
        ),
        migrations.AddField(
            model_name='cancha',
            name='deporte',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reservas.deporte'),
        ),
        migrations.AddField(
            model_name='cancha',
            name='hora_laboral',
            field=models.ManyToManyField(through='reservas.CanchaHoraLaboral', to='reservas.horalaboral'),
        ),
        migrations.AddField(
            model_name='cancha',
            name='superficie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='reservas.superficie'),
        ),
        migrations.AddConstraint(
            model_name='reserva',
            constraint=models.UniqueConstraint(condition=models.Q(('is_deleted', False)), fields=('cancha', 'fecha', 'hora'), name='reserva_unico', violation_error_message='Ya existe una reserva con la misma cancha, fecha y hora.'),
        ),
        migrations.AddConstraint(
            model_name='reserva',
            constraint=models.CheckConstraint(check=models.Q(('precio__gte', 0)), name='precio_positivo', violation_error_message='El precio debe ser positivo.'),
        ),
        migrations.AddConstraint(
            model_name='reserva',
            constraint=models.CheckConstraint(check=models.Q(('asistencia', True), ('pagado', False), _negated=True), name='asistencia_pagado', violation_error_message='No se puede marcar asistencia si la reserva no está pagada.'),
        ),
        migrations.AlterUniqueTogether(
            name='horalaboral',
            unique_together={('club', 'hora')},
        ),
        migrations.AlterUniqueTogether(
            name='canchahoralaboral',
            unique_together={('cancha', 'hora_laboral')},
        ),
        migrations.AddConstraint(
            model_name='cancha',
            constraint=models.CheckConstraint(check=models.Q(('precio__gte', 0), ('precio_luz__gte', 0)), name='cancha_precio_positivo', violation_error_message='Los precios definidos deben ser positivo.'),
        ),
        migrations.AddConstraint(
            model_name='cancha',
            constraint=models.CheckConstraint(check=models.Q(('precio_luz__gte', models.F('precio'))), name='precio_luz_mayor_precio', violation_error_message='El precio por hora con luz no puede ser menor al precio por hora.'),
        ),
    ]
